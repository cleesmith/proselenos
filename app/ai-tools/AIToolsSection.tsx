// app/ai-tools/AIToolsSection.tsx

'use client';

import { useState, useEffect } from 'react';
import { ThemeConfig } from '../shared/theme';
import StyledSmallButton from '@/components/StyledSmallButton';
import { showAlert } from '../shared/alerts';
import ToolProgressIndicator from './ToolProgressIndicator';
import ToolResponseDisplay from './ToolResponseDisplay';
import DualPanelEditor from './DualPanelEditor';
import WritingAssistantModal from '../writing-assistant/WritingAssistantModal';
import { getToolPromptAction } from '@/lib/tools-actions';

interface AIToolsSectionProps {
  // Session
  session: any;
  
  // Tool selection
  selectedCategory: string;
  selectedTool: string;
  toolsInCategory: any[];
  toolsReady: boolean;
  isInstallingToolPrompts: boolean;
  
  // File selection
  selectedManuscriptForTool: any | null;
  
  // Execution state
  toolExecuting: boolean;
  toolResult: string;
  toolJustFinished: boolean;
  savedReportFileName: string | null;
  savedReportFileId: string | null;
  
  // Timer
  elapsedTime: number;
  
  // Cached manuscript content
  manuscriptContent: string;
  
  // Project state
  currentProject: string | null;
  currentProjectId: string | null;
  isGoogleDriveOperationPending: boolean;
  rootFolderId: string;
  isSystemInitializing: boolean;
  
  // Theme
  theme: ThemeConfig;
  isDarkMode: boolean;
  
  // AI model info for report formatting
  currentProvider?: string;
  currentModel?: string;
  
  // Callbacks
  onCategoryChange: (category: string) => void;
  onToolChange: (tool: string) => void;
  onSetupTool: () => void;
  onClearTool: () => void;
  onExecuteTool: () => void;
  onLoadFileIntoEditor?: (content: string, fileName: string, fileId?: string) => void;
}

export default function AIToolsSection({
  session,
  selectedCategory,
  selectedTool,
  toolsInCategory,
  toolsReady,
  isInstallingToolPrompts,
  selectedManuscriptForTool,
  toolExecuting,
  toolResult,
  toolJustFinished,
  savedReportFileName,
  savedReportFileId,
  elapsedTime,
  manuscriptContent,
  currentProject,
  currentProjectId,
  isGoogleDriveOperationPending,
  rootFolderId,
  isSystemInitializing,
  theme,
  isDarkMode,
  currentProvider = 'unknown',
  currentModel = 'unknown',
  onCategoryChange,
  onToolChange,
  onSetupTool,
  onClearTool,
  onExecuteTool,
  onLoadFileIntoEditor
}: AIToolsSectionProps) {
  
  // Dual panel editor state (new - separate from view)
  const [showDualEditor, setShowDualEditor] = useState(false);
  const [editorManuscriptContent, setEditorManuscriptContent] = useState('');
  
  // AI Writing Assistant state
  const [showWritingAssistant, setShowWritingAssistant] = useState(false);
  
  // Tool prompt editing state
  const [isLoadingPrompt, setIsLoadingPrompt] = useState(false);

  // Preload markdown editor when tool completes
  useEffect(() => {
    if (toolJustFinished) {
      // Warm up the markdown editor bundle in the background
      import('@uiw/react-md-editor');
    }
  }, [toolJustFinished]);

  // Handler for close/reopen modal functionality
  const handleWritingAssistantCloseReopen = () => {
    // Close the modal first
    setShowWritingAssistant(false);
    
    // Reopen immediately after a brief delay
    setTimeout(() => {
      setShowWritingAssistant(true);
    }, 150); // 150ms delay for smooth UX
  };

  const formatFullReport = (toolResult: string, toolId: string, currentProvider: string, currentModel: string, manuscriptFileName: string, currentProject: string) => {
    // Create human-readable timestamp like the original Node.js app
    const formatter = new Intl.DateTimeFormat('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
    const dateTimeStr = formatter.format(new Date());
    
    // Extract tool name from toolId (e.g., "Core Editing Tools/copy_editing.txt" -> "copy_editing")
    const toolName = toolId.split('/').pop()?.replace('.txt', '') || 'tool_report';
    
    // Get display name for the tool
    const displayToolName = toolName
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
    
    // Create full manuscript path
    const manuscriptPath = `My Drive › proselenos_projects › ${currentProject} › ${manuscriptFileName}`;
    
    // Format the report content exactly like the original Node.js app with manuscript file info
    return `
${displayToolName.toUpperCase()} REPORT

Date: ${dateTimeStr}

Model: ${currentProvider}:${currentModel}
      
Manuscript File: ${manuscriptPath}

${toolResult}

---
Report generated by Proselenos
https://proselenos.com
`;
  };

  // const handleEditClick = () => {
  //   if (!selectedManuscriptForTool) return;
    
  //   // Use cached manuscript content directly - no API call needed!
  //   setEditorManuscriptContent(manuscriptContent);
  //   setShowDualEditor(true);
  // };
  const handleEditClick = () => {
    if (!selectedManuscriptForTool) return;
    setEditorManuscriptContent(manuscriptContent);
    // Pass selectedManuscriptForTool.id into DualPanelEditor
    setShowDualEditor(true);
  };
  
  const handleCategoryChange = (category: string) => {
    if (!currentProject) {
      showAlert('Please select a project first', 'warning', undefined, isDarkMode);
      return;
    }
    onCategoryChange(category);
    onToolChange(''); // Reset tool selection when category changes
  };

  const handleToolChange = (tool: string) => {
    if (!currentProject) {
      showAlert('Please select a project first', 'warning', undefined, isDarkMode);
      return;
    }
    onToolChange(tool);
  };

  const handlePromptEdit = async () => {
    if (!selectedTool || !onLoadFileIntoEditor || isLoadingPrompt) return;
    
    setIsLoadingPrompt(true);
    try {
      const result = await getToolPromptAction(selectedTool);
      if (result.success && typeof result.content === 'string') {
        // Pass the file ID for proper existing file mode
        const toolPromptPath = `tool-prompts/${selectedTool}`;
        onLoadFileIntoEditor(result.content, toolPromptPath, result.fileId);
      } else {
        showAlert(result.error || 'Failed to load tool prompt', 'error', undefined, isDarkMode);
      }
    } catch (error) {
      showAlert('Error loading tool prompt', 'error', undefined, isDarkMode);
    } finally {
      setIsLoadingPrompt(false);
    }
  };

  return (
    <div style={{ 
      marginBottom: '12px',
      backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)',
      border: `1px solid ${isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`,
      borderRadius: '8px',
      padding: '12px'
    }}>
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'flex-start', 
        marginBottom: '6px' 
      }}>
        <h2 style={{ 
          fontSize: '16px', 
          fontWeight: 'bold', 
          color: theme.text,
          marginBottom: 0
        }}>
          Run an AI tool:
        </h2>
        <StyledSmallButton
          onClick={() => setShowWritingAssistant(true)}
          disabled={isSystemInitializing || !currentProject || isGoogleDriveOperationPending || toolExecuting}
          theme={theme}
          styleOverrides={{ fontSize: '10px', padding: '2px 8px', height: '22px', lineHeight: 1 }}
        >
          ✨ AI Writing Assistant
        </StyledSmallButton>
      </div>
      
      <div style={{ 
        fontSize: '14px', 
        color: theme.textSecondary,
        marginBottom: '8px' 
      }}>
        Category:
      </div>

      <select
        value={selectedCategory}
        onChange={(e) => handleCategoryChange(e.target.value)}
        disabled={!toolsReady || toolExecuting || !currentProject}
        style={{
          width: '100%',
          maxWidth: '300px',
          padding: '4px 8px',
          backgroundColor: (toolsReady && currentProject) ? theme.inputBg : '#666',
          color: (toolsReady && currentProject) ? theme.text : '#999',
          border: `1px solid ${theme.border}`,
          borderRadius: '3px',
          fontSize: '11px',
          marginBottom: '8px',
          cursor: (toolsReady && currentProject) ? 'pointer' : 'not-allowed'
        }}
      >
        <option value="">{toolsReady ? 'Select a category...' : (isInstallingToolPrompts ? 'Installing tools...' : 'Loading tools...')}</option>
        <option value="Core Editing Tools">Core Editing Tools</option>
        <option value="Other Editing Tools">Other Editing Tools</option>
        {/* <option value="AI Writing Tools">AI Writing Tools</option> */}
        <option value="User Tools">User Tools</option>
      </select>

      <div style={{ 
        fontSize: '14px', 
        color: theme.textSecondary,
        marginBottom: '8px' 
      }}>
        Tool:
      </div>

      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
        <select
          value={selectedTool}
          onChange={(e) => handleToolChange(e.target.value)}
          disabled={!selectedCategory || !toolsReady || toolExecuting || !currentProject}
          style={{
            flex: '1',
            maxWidth: '300px',
            padding: '4px 8px',
            backgroundColor: (selectedCategory && toolsReady && currentProject) ? theme.inputBg : '#666',
            color: (selectedCategory && toolsReady && currentProject) ? theme.text : '#999',
            border: `1px solid ${theme.border}`,
            borderRadius: '3px',
            fontSize: '11px',
            cursor: (selectedCategory && toolsReady && currentProject) ? 'pointer' : 'not-allowed'
          }}
        >
          <option value="">
            {!toolsReady ? (isInstallingToolPrompts ? 'Installing tools...' : 'Loading tools...') : 
             selectedCategory ? 'Select a tool...' : 'Please select a category first'}
          </option>
          {toolsInCategory.map(tool => (
            <option key={tool.id} value={tool.id}>
              {tool.name.split('_').map((word: string) => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
            </option>
          ))}
        </select>

        <StyledSmallButton
          onClick={handlePromptEdit}
          disabled={isSystemInitializing || !selectedTool || !toolsReady || toolExecuting || isLoadingPrompt}
          theme={theme}
        >
          {isLoadingPrompt ? 'Loading...' : 'edit prompt'}
        </StyledSmallButton>

        <StyledSmallButton
          onClick={onSetupTool}
          disabled={isSystemInitializing || !selectedTool || !toolsReady || !currentProject || isGoogleDriveOperationPending || toolExecuting}
          theme={theme}
        >
          Select
        </StyledSmallButton>

        <StyledSmallButton
          onClick={onClearTool}
          disabled={isSystemInitializing || !selectedManuscriptForTool && !toolResult && elapsedTime === 0 || toolExecuting}
          theme={theme}
        >
          Clear
        </StyledSmallButton>

        <StyledSmallButton
          onClick={onExecuteTool}
          disabled={isSystemInitializing || !selectedManuscriptForTool || toolExecuting || !toolsReady || isGoogleDriveOperationPending || toolJustFinished}
          theme={theme}
        >
          {toolExecuting ? 'Running...' : 'Run'}
        </StyledSmallButton>
        
        <ToolProgressIndicator 
          toolExecuting={toolExecuting}
          elapsedTime={elapsedTime}
          theme={theme}
          toolResult={toolResult}
          onEditClick={handleEditClick}
        />
      </div>

      {/* Show selected manuscript info */}
      {selectedManuscriptForTool && (
        <div style={{
          marginTop: '8px',
          padding: '6px 8px',
          backgroundColor: theme.statusBg,
          border: `1px solid ${theme.border}`,
          borderRadius: '3px',
          fontSize: '11px',
          color: theme.text
        }}>
          <strong>Selected manuscript:</strong> {selectedManuscriptForTool.name}
        </div>
      )}

      <ToolResponseDisplay 
        toolResult={toolResult}
        theme={theme}
      />

      {/* Dual Panel Editor Modal */}
      {showDualEditor && selectedManuscriptForTool && (
        <DualPanelEditor
          isVisible={showDualEditor}
          onClose={() => setShowDualEditor(false)}
          manuscriptContent={editorManuscriptContent}
          manuscriptName={selectedManuscriptForTool.name ?? 'manuscript'}
          manuscriptFileId={selectedManuscriptForTool.id}      // <- new prop (non‑null)
          aiReport={
            selectedTool && selectedManuscriptForTool.name && currentProject
              ? formatFullReport(
                  toolResult,
                  selectedTool,
                  currentProvider,
                  currentModel,
                  selectedManuscriptForTool.name,
                  currentProject
                )
              : toolResult
          }
          savedReportFileName={savedReportFileName}
          reportFileId={savedReportFileId}
          theme={theme}
          isDarkMode={isDarkMode}
          currentProject={currentProject}
          currentProjectId={currentProjectId}
          rootFolderId={rootFolderId}
          session={session}
        />
      )}

      {/* AI Writing Assistant Modal */}
      {showWritingAssistant && (
        <WritingAssistantModal
          isOpen={showWritingAssistant}
          onClose={() => setShowWritingAssistant(false)}
          currentProject={currentProject}
          currentProjectId={currentProjectId}
          rootFolderId={rootFolderId}
          theme={theme}
          isDarkMode={isDarkMode}
          currentProvider={currentProvider || 'unknown'}
          currentModel={currentModel || 'unknown'}
          session={session}
          onLoadFileIntoEditor={onLoadFileIntoEditor}
          onModalCloseReopen={handleWritingAssistantCloseReopen}
        />
      )}
    </div>
  );
}
