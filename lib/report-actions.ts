// lib/report-actions.ts
'use server';

import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import {
  getAuthClient,
  getDriveClient,
  createNewFile,
} from '@/lib/googleDrive';

type ActionResult<T = any> = {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
};

async function getAuthenticatedClients() {
  const session = await getServerSession(authOptions);
  
  if (!session?.accessToken) {
    return { error: 'Not authenticated' };
  }

  const authClient = await getAuthClient(session.accessToken as string);
  const drive = await getDriveClient(authClient);
  
  return {
    session,
    authClient,
    drive
  };
}

export async function saveToolReportAction(
  toolId: string,
  toolResult: string,
  projectFolderId: string,
  currentProvider: string,
  currentModel: string,
  manuscriptFileName: string,
  currentProject: string
): Promise<ActionResult> {
  try {
    const clients = await getAuthenticatedClients();
    if ('error' in clients) {
      return { success: false, error: clients.error };
    }

    const { drive } = clients;
    
    if (!toolResult || !projectFolderId) {
      return { success: false, error: 'Tool result and project folder ID are required' };
    }

    // Create human-readable timestamp like the original Node.js app
    const formatter = new Intl.DateTimeFormat('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
    const dateTimeStr = formatter.format(new Date());
    
    // Create filename timestamp (safe for filenames)
    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 15);
    
    // Extract tool name from toolId (e.g., "Core Editing Tools/copy_editing.txt" -> "copy_editing")
    const toolName = toolId.split('/').pop()?.replace('.txt', '') || 'tool_report';
    const cleanToolName = toolName.toLowerCase()
      .replace(/[^a-z0-9]/g, '_')
      .replace(/_+/g, '_')
      .replace(/^_|_$/g, '');
    
    const baseFilename = `${cleanToolName}_${timestamp}`;
    const reportFilename = `${baseFilename}.txt`;
    
    // Get display name for the tool
    const displayToolName = toolName
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
    
    // Create full manuscript path
    const manuscriptPath = `My Drive › proselenos_projects › ${currentProject} › ${manuscriptFileName}`;
    
    // format the Report content
    const reportWithStats = `
${displayToolName.toUpperCase()} REPORT

Date: ${dateTimeStr}

Model: ${currentProvider}:${currentModel}

Manuscript File: ${manuscriptPath}

${toolResult}

---
Report generated by Proselenos
https://proselenos.com
`;

    // Save the report to the project folder on Google Drive - use direct creation since filename is unique
    const file = await createNewFile(
      drive,
      reportWithStats,
      projectFolderId,
      reportFilename
    );
    
    return { 
      success: true, 
      data: {
        fileId: file.id,
        fileName: file.name || reportFilename,
        displayName: displayToolName,
        timestamp: dateTimeStr
      },
      message: `Report saved: ${reportFilename}` 
    };
  } catch (error: any) {
    console.error('Error saving tool report:', error);
    return { 
      success: false, 
      error: error.message || 'Failed to save report' 
    };
  }
}